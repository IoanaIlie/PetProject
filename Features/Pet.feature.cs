// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PetProject.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Pet", SourceFile="Features\\Pet.feature", SourceLine=0)]
    public partial class PetFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Pet.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Pet", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void _1_CreatePetUsingValidValues(string iD, string name, string status, string categoryId, string categoryName, string tagId, string tagName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("status", status);
            argumentsOfScenario.Add("categoryId", categoryId);
            argumentsOfScenario.Add("categoryName", categoryName);
            argumentsOfScenario.Add("tagId", tagId);
            argumentsOfScenario.Add("tagName", tagName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1. Create pet using valid values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table1.AddRow(new string[] {
                            "name",
                            string.Format("{0}", name)});
                table1.AddRow(new string[] {
                            "status",
                            string.Format("{0}", status)});
                table1.AddRow(new string[] {
                            "categoryId",
                            string.Format("{0}", categoryId)});
                table1.AddRow(new string[] {
                            "categoryName",
                            string.Format("{0}", categoryName)});
                table1.AddRow(new string[] {
                            "photoUrls",
                            "default"});
                table1.AddRow(new string[] {
                            "tagId",
                            string.Format("{0}", tagId)});
                table1.AddRow(new string[] {
                            "tagName",
                            string.Format("{0}", tagName)});
#line 8
 testRunner.Given("the pet with:", ((string)(null)), table1, "Given ");
#line hidden
#line 17
 testRunner.When("a pet is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.Then("the response code should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
 testRunner.And("the response contains the posted values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.When("try to find the pet by \"ID\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.Then("the response code should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.And("the response contains the posted values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("1. Create pet using valid values, 1", new string[] {
                "positive"}, SourceLine=25)]
        public virtual void _1_CreatePetUsingValidValues_1()
        {
#line 7
this._1_CreatePetUsingValidValues("1", "Lila", "1", "1", "NicePet", "2", "Tag1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("1. Create pet using valid values, 2", new string[] {
                "positive"}, SourceLine=25)]
        public virtual void _1_CreatePetUsingValidValues_2()
        {
#line 7
this._1_CreatePetUsingValidValues("2", "Lila0", "0", "2", "NicePets", "3", "Tag2", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("1. Create pet using valid values, 3", new string[] {
                "positive"}, SourceLine=25)]
        public virtual void _1_CreatePetUsingValidValues_3()
        {
#line 7
this._1_CreatePetUsingValidValues("3", "Lila1", "1", "1", "NicePet", "4", "Tag3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("1. Create pet using valid values, 4", new string[] {
                "positive"}, SourceLine=25)]
        public virtual void _1_CreatePetUsingValidValues_4()
        {
#line 7
this._1_CreatePetUsingValidValues("4", "Lila2", "2", "2", "NicePets", "5", "Tag4", ((string[])(null)));
#line hidden
        }
        
        public virtual void _2_CreatePetUsingInvalidAndMandatoryNameAndPhotoUrlsValuesValues(string iD, string id, string name, string photoUrls, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("photoUrls", photoUrls);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2. Create pet using invalid and mandatory(name and photoUrls) values values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table2.AddRow(new string[] {
                            "id",
                            string.Format("{0}", id)});
                table2.AddRow(new string[] {
                            "name",
                            string.Format("{0}", name)});
                table2.AddRow(new string[] {
                            "photoUrls",
                            "default"});
#line 33
 testRunner.Given("the pet with:", ((string)(null)), table2, "Given ");
#line hidden
#line 38
 testRunner.When("a pet is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.Then("the response code should be \"405\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("2. Create pet using invalid and mandatory(name and photoUrls) values values, 1", new string[] {
                "validation"}, SourceLine=42)]
        public virtual void _2_CreatePetUsingInvalidAndMandatoryNameAndPhotoUrlsValuesValues_1()
        {
#line 32
this._2_CreatePetUsingInvalidAndMandatoryNameAndPhotoUrlsValuesValues("1", "-1", "Dog", "default", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("2. Create pet using invalid and mandatory(name and photoUrls) values values, 2", new string[] {
                "validation"}, SourceLine=42)]
        public virtual void _2_CreatePetUsingInvalidAndMandatoryNameAndPhotoUrlsValuesValues_2()
        {
#line 32
this._2_CreatePetUsingInvalidAndMandatoryNameAndPhotoUrlsValuesValues("2", "999999999999999", "Dog", "default", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("2. Create pet using invalid and mandatory(name and photoUrls) values values, 3", new string[] {
                "validation"}, SourceLine=42)]
        public virtual void _2_CreatePetUsingInvalidAndMandatoryNameAndPhotoUrlsValuesValues_3()
        {
#line 32
this._2_CreatePetUsingInvalidAndMandatoryNameAndPhotoUrlsValuesValues("3", "0", "", "default", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("2. Create pet using invalid and mandatory(name and photoUrls) values values, 4", new string[] {
                "validation"}, SourceLine=42)]
        public virtual void _2_CreatePetUsingInvalidAndMandatoryNameAndPhotoUrlsValuesValues_4()
        {
#line 32
this._2_CreatePetUsingInvalidAndMandatoryNameAndPhotoUrlsValuesValues("4", "0", "Dog", "", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("2. Create pet using invalid and mandatory(name and photoUrls) values values, 5", new string[] {
                "validation"}, SourceLine=42)]
        public virtual void _2_CreatePetUsingInvalidAndMandatoryNameAndPhotoUrlsValuesValues_5()
        {
#line 32
this._2_CreatePetUsingInvalidAndMandatoryNameAndPhotoUrlsValuesValues("5", "0", "", "", ((string[])(null)));
#line hidden
        }
        
        public virtual void _3_CreatePet_DuplicateDetectionForTheSameIdAndStatus(string iD, string id1, string status1, string id2, string status2, string duplicateResponse, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("id1", id1);
            argumentsOfScenario.Add("status1", status1);
            argumentsOfScenario.Add("id2", id2);
            argumentsOfScenario.Add("status2", status2);
            argumentsOfScenario.Add("duplicateResponse", duplicateResponse);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3. Create Pet - duplicate detection for the same id and status", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table3.AddRow(new string[] {
                            "id",
                            string.Format("{0}", id1)});
                table3.AddRow(new string[] {
                            "name",
                            "Dog"});
                table3.AddRow(new string[] {
                            "status",
                            string.Format("{0}", status1)});
                table3.AddRow(new string[] {
                            "photoUrls",
                            "default"});
#line 51
 testRunner.Given("the pet with:", ((string)(null)), table3, "Given ");
#line hidden
#line 57
 testRunner.When("a pet is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.Then("the response code should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table4.AddRow(new string[] {
                            "id",
                            string.Format("{0}", id2)});
                table4.AddRow(new string[] {
                            "name",
                            "Dog"});
                table4.AddRow(new string[] {
                            "status",
                            string.Format("{0}", status2)});
                table4.AddRow(new string[] {
                            "photoUrls",
                            "default"});
#line 59
 testRunner.Given("the pet with:", ((string)(null)), table4, "Given ");
#line hidden
#line 65
 testRunner.When("a pet is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.Then(string.Format("the response code should be \"{0}\"", duplicateResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("3. Create Pet - duplicate detection for the same id and status, 1", new string[] {
                "validation"}, SourceLine=69)]
        public virtual void _3_CreatePet_DuplicateDetectionForTheSameIdAndStatus_1()
        {
#line 50
this._3_CreatePet_DuplicateDetectionForTheSameIdAndStatus("1", "10", "1", "10", "1", "405", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("3. Create Pet - duplicate detection for the same id and status, 2", new string[] {
                "validation"}, SourceLine=69)]
        public virtual void _3_CreatePet_DuplicateDetectionForTheSameIdAndStatus_2()
        {
#line 50
this._3_CreatePet_DuplicateDetectionForTheSameIdAndStatus("2", "20", "0", "20", "0", "405", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("3. Create Pet - duplicate detection for the same id and status, 3", new string[] {
                "validation"}, SourceLine=69)]
        public virtual void _3_CreatePet_DuplicateDetectionForTheSameIdAndStatus_3()
        {
#line 50
this._3_CreatePet_DuplicateDetectionForTheSameIdAndStatus("3", "30", "2", "30", "2", "405", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("3. Create Pet - duplicate detection for the same id and status, 4", new string[] {
                "validation"}, SourceLine=69)]
        public virtual void _3_CreatePet_DuplicateDetectionForTheSameIdAndStatus_4()
        {
#line 50
this._3_CreatePet_DuplicateDetectionForTheSameIdAndStatus("4", "40", "1", "40", "2", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("3. Create Pet - duplicate detection for the same id and status, 5", new string[] {
                "validation"}, SourceLine=69)]
        public virtual void _3_CreatePet_DuplicateDetectionForTheSameIdAndStatus_5()
        {
#line 50
this._3_CreatePet_DuplicateDetectionForTheSameIdAndStatus("5", "50", "0", "50", "2", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("3. Create Pet - duplicate detection for the same id and status, 6", new string[] {
                "validation"}, SourceLine=69)]
        public virtual void _3_CreatePet_DuplicateDetectionForTheSameIdAndStatus_6()
        {
#line 50
this._3_CreatePet_DuplicateDetectionForTheSameIdAndStatus("6", "60", "2", "60", "1", "200", ((string[])(null)));
#line hidden
        }
        
        public virtual void _4_SearchPetByStatusValidation(string iD, string status, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("status", status);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("4. Search pet by status validation", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 79
 testRunner.Given(string.Format("the status filter as {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 80
 testRunner.When("try to find the pet by \"STATUS\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("the response contains the searched statuses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("4. Search pet by status validation, 1", new string[] {
                "validation"}, SourceLine=84)]
        public virtual void _4_SearchPetByStatusValidation_1()
        {
#line 78
this._4_SearchPetByStatusValidation("1", "1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("4. Search pet by status validation, 2", new string[] {
                "validation"}, SourceLine=84)]
        public virtual void _4_SearchPetByStatusValidation_2()
        {
#line 78
this._4_SearchPetByStatusValidation("2", "2", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("4. Search pet by status validation, 3", new string[] {
                "validation"}, SourceLine=84)]
        public virtual void _4_SearchPetByStatusValidation_3()
        {
#line 78
this._4_SearchPetByStatusValidation("3", "0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("4. Search pet by status validation, 4", new string[] {
                "validation"}, SourceLine=84)]
        public virtual void _4_SearchPetByStatusValidation_4()
        {
#line 78
this._4_SearchPetByStatusValidation("4", "0,1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("4. Search pet by status validation, 5", new string[] {
                "validation"}, SourceLine=84)]
        public virtual void _4_SearchPetByStatusValidation_5()
        {
#line 78
this._4_SearchPetByStatusValidation("5", "1,2", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("4. Search pet by status validation, 6", new string[] {
                "validation"}, SourceLine=84)]
        public virtual void _4_SearchPetByStatusValidation_6()
        {
#line 78
this._4_SearchPetByStatusValidation("6", "0,2", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("4. Search pet by status validation, 7", new string[] {
                "validation"}, SourceLine=84)]
        public virtual void _4_SearchPetByStatusValidation_7()
        {
#line 78
this._4_SearchPetByStatusValidation("7", "0,1,2", ((string[])(null)));
#line hidden
        }
        
        public virtual void _5_ModifyPetUsingValidValues(string iD, string name1, string status1, string categoryId1, string categoryName1, string tagId1, string tagName1, string name2, string status2, string categoryId2, string categoryName2, string tagId2, string tagName2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("name1", name1);
            argumentsOfScenario.Add("status1", status1);
            argumentsOfScenario.Add("categoryId1", categoryId1);
            argumentsOfScenario.Add("categoryName1", categoryName1);
            argumentsOfScenario.Add("tagId1", tagId1);
            argumentsOfScenario.Add("tagName1", tagName1);
            argumentsOfScenario.Add("name2", name2);
            argumentsOfScenario.Add("status2", status2);
            argumentsOfScenario.Add("categoryId2", categoryId2);
            argumentsOfScenario.Add("categoryName2", categoryName2);
            argumentsOfScenario.Add("tagId2", tagId2);
            argumentsOfScenario.Add("tagName2", tagName2);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5. Modify pet using valid values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table5.AddRow(new string[] {
                            "name",
                            string.Format("{0}", name1)});
                table5.AddRow(new string[] {
                            "status",
                            string.Format("{0}", status1)});
                table5.AddRow(new string[] {
                            "categoryId",
                            string.Format("{0}", categoryId1)});
                table5.AddRow(new string[] {
                            "categoryName",
                            string.Format("{0}", categoryName1)});
                table5.AddRow(new string[] {
                            "photoUrls",
                            "default"});
                table5.AddRow(new string[] {
                            "tagId",
                            string.Format("{0}", tagId1)});
                table5.AddRow(new string[] {
                            "tagName",
                            string.Format("{0}", tagName1)});
#line 95
 testRunner.Given("the pet with:", ((string)(null)), table5, "Given ");
#line hidden
#line 104
 testRunner.When("a pet is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 105
 testRunner.Then("the response code should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
 testRunner.And("the response contains the posted values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table6.AddRow(new string[] {
                            "name",
                            string.Format("{0}", name2)});
                table6.AddRow(new string[] {
                            "status",
                            string.Format("{0}", status2)});
                table6.AddRow(new string[] {
                            "categoryId",
                            string.Format("{0}", categoryId2)});
                table6.AddRow(new string[] {
                            "categoryName",
                            string.Format("{0}", categoryName2)});
                table6.AddRow(new string[] {
                            "photoUrls",
                            "default2"});
                table6.AddRow(new string[] {
                            "tagId",
                            string.Format("{0}", tagId2)});
                table6.AddRow(new string[] {
                            "tagName",
                            string.Format("{0}", tagName2)});
#line 107
 testRunner.Given("the pet with:", ((string)(null)), table6, "Given ");
#line hidden
#line 116
 testRunner.When("the pet is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
 testRunner.Then("the response code should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
 testRunner.And("the response contains the posted values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("5. Modify pet using valid values, 1", new string[] {
                "positive"}, SourceLine=121)]
        public virtual void _5_ModifyPetUsingValidValues_1()
        {
#line 94
this._5_ModifyPetUsingValidValues("1", "Lila1", "1", "1", "NicePet1", "1", "Tag1", "Lila2", "2", "2", "NicePet2", "2", "Tag2", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("5. Modify pet using valid values, 2", new string[] {
                "positive"}, SourceLine=121)]
        public virtual void _5_ModifyPetUsingValidValues_2()
        {
#line 94
this._5_ModifyPetUsingValidValues("2", "Lila01", "1", "1", "NicePet01", "1", "Tag01", "Lila01", "0", "2", "NicePet02", "2", "Tag02", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("5. Modify pet using valid values, 3", new string[] {
                "positive"}, SourceLine=121)]
        public virtual void _5_ModifyPetUsingValidValues_3()
        {
#line 94
this._5_ModifyPetUsingValidValues("3", "Lila001", "2", "1", "NicePet001", "1", "Tag001", "Lila001", "1", "2", "NicePet002", "2", "Tag002", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("5. Modify pet using valid values, 4", new string[] {
                "positive"}, SourceLine=121)]
        public virtual void _5_ModifyPetUsingValidValues_4()
        {
#line 94
this._5_ModifyPetUsingValidValues("4", "Lila0001", "2", "1", "NicePet0001", "1", "Tag0001", "Lila0001", "0", "2", "NicePet0002", "2", "Tag0002", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("5. Modify pet using valid values, 5", new string[] {
                "positive"}, SourceLine=121)]
        public virtual void _5_ModifyPetUsingValidValues_5()
        {
#line 94
this._5_ModifyPetUsingValidValues("5", "Lila0001", "0", "1", "NicePet00001", "1", "Tag00001", "Lila00001", "1", "2", "NicePet00002", "2", "Tag00002", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("5. Modify pet using valid values, 6", new string[] {
                "positive"}, SourceLine=121)]
        public virtual void _5_ModifyPetUsingValidValues_6()
        {
#line 94
this._5_ModifyPetUsingValidValues("6", "Lila0001", "0", "1", "NicePet000001", "1", "Tag000001", "Lila000001", "2", "2", "NicePet000002", "2", "Tag000002", ((string[])(null)));
#line hidden
        }
        
        public virtual void _6_ModifyPetUsingInvalidValues(string iD, string name1, string status1, string categoryId1, string categoryName1, string tagId1, string tagName1, string id2, string name2, string categoryId2, string categoryName2, string tagId2, string tagName2, string responseUpdate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("name1", name1);
            argumentsOfScenario.Add("status1", status1);
            argumentsOfScenario.Add("categoryId1", categoryId1);
            argumentsOfScenario.Add("categoryName1", categoryName1);
            argumentsOfScenario.Add("tagId1", tagId1);
            argumentsOfScenario.Add("tagName1", tagName1);
            argumentsOfScenario.Add("id2", id2);
            argumentsOfScenario.Add("name2", name2);
            argumentsOfScenario.Add("categoryId2", categoryId2);
            argumentsOfScenario.Add("categoryName2", categoryName2);
            argumentsOfScenario.Add("tagId2", tagId2);
            argumentsOfScenario.Add("tagName2", tagName2);
            argumentsOfScenario.Add("responseUpdate", responseUpdate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("6. Modify pet using invalid values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table7.AddRow(new string[] {
                            "name",
                            string.Format("{0}", name1)});
                table7.AddRow(new string[] {
                            "status",
                            string.Format("{0}", status1)});
                table7.AddRow(new string[] {
                            "categoryId",
                            string.Format("{0}", categoryId1)});
                table7.AddRow(new string[] {
                            "categoryName",
                            string.Format("{0}", categoryName1)});
                table7.AddRow(new string[] {
                            "photoUrls",
                            "default"});
                table7.AddRow(new string[] {
                            "tagId",
                            string.Format("{0}", tagId1)});
                table7.AddRow(new string[] {
                            "tagName",
                            string.Format("{0}", tagName1)});
#line 131
 testRunner.Given("the pet with:", ((string)(null)), table7, "Given ");
#line hidden
#line 140
 testRunner.When("a pet is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 141
 testRunner.Then("the response code should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
 testRunner.And("the response contains the posted values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table8.AddRow(new string[] {
                            "id",
                            string.Format("{0}", id2)});
                table8.AddRow(new string[] {
                            "name",
                            string.Format("{0}", name2)});
                table8.AddRow(new string[] {
                            "categoryId",
                            string.Format("{0}", categoryId2)});
                table8.AddRow(new string[] {
                            "categoryName",
                            string.Format("{0}", categoryName2)});
                table8.AddRow(new string[] {
                            "photoUrls",
                            "default2"});
                table8.AddRow(new string[] {
                            "tagId",
                            string.Format("{0}", tagId2)});
                table8.AddRow(new string[] {
                            "tagName",
                            string.Format("{0}", tagName2)});
#line 143
 testRunner.Given("the pet with:", ((string)(null)), table8, "Given ");
#line hidden
#line 152
 testRunner.When("the pet is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 153
 testRunner.Then(string.Format("the response code should be \"{0}\"", responseUpdate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("6. Modify pet using invalid values, 1", new string[] {
                "negative"}, SourceLine=156)]
        public virtual void _6_ModifyPetUsingInvalidValues_1()
        {
#line 130
this._6_ModifyPetUsingInvalidValues("1", "Lila1", "1", "1", "NicePet1", "1", "Tag1", "1", "Lila2", "2", "NicePet2", "2", "Tag2", "400", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("6. Modify pet using invalid values, 2", new string[] {
                "negative"}, SourceLine=156)]
        public virtual void _6_ModifyPetUsingInvalidValues_2()
        {
#line 130
this._6_ModifyPetUsingInvalidValues("2", "Lila01", "1", "1", "NicePet01", "1", "Tag01", "99999999999999999", "Lila01", "2", "NicePet02", "2", "Tag02", "404", ((string[])(null)));
#line hidden
        }
        
        public virtual void _7_DeleteExistingPet(string iD, string name, string status, string categoryId, string categoryName, string tagId, string tagName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("status", status);
            argumentsOfScenario.Add("categoryId", categoryId);
            argumentsOfScenario.Add("categoryName", categoryName);
            argumentsOfScenario.Add("tagId", tagId);
            argumentsOfScenario.Add("tagName", tagName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("7. Delete existing pet", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 161
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table9.AddRow(new string[] {
                            "name",
                            string.Format("{0}", name)});
                table9.AddRow(new string[] {
                            "status",
                            string.Format("{0}", status)});
                table9.AddRow(new string[] {
                            "categoryId",
                            string.Format("{0}", categoryId)});
                table9.AddRow(new string[] {
                            "categoryName",
                            string.Format("{0}", categoryName)});
                table9.AddRow(new string[] {
                            "photoUrls",
                            "default"});
                table9.AddRow(new string[] {
                            "tagId",
                            string.Format("{0}", tagId)});
                table9.AddRow(new string[] {
                            "tagName",
                            string.Format("{0}", tagName)});
#line 162
 testRunner.Given("the pet with:", ((string)(null)), table9, "Given ");
#line hidden
#line 171
 testRunner.When("a pet is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 172
 testRunner.Then("the response code should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 173
 testRunner.And("the response contains the posted values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
 testRunner.When("the pet is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 176
 testRunner.Then("the response code should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 177
 testRunner.When("the pet is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 178
 testRunner.Then("the response code should be \"404\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("7. Delete existing pet, 1", new string[] {
                "positive"}, SourceLine=181)]
        public virtual void _7_DeleteExistingPet_1()
        {
#line 161
this._7_DeleteExistingPet("1", "Lila", "1", "1", "NicePet", "2", "Tag1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("7. Delete existing pet, 2", new string[] {
                "positive"}, SourceLine=181)]
        public virtual void _7_DeleteExistingPet_2()
        {
#line 161
this._7_DeleteExistingPet("2", "Lila0", "0", "2", "NicePets", "3", "Tag2", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("7. Delete existing pet, 3", new string[] {
                "positive"}, SourceLine=181)]
        public virtual void _7_DeleteExistingPet_3()
        {
#line 161
this._7_DeleteExistingPet("3", "Lila2", "2", "2", "NicePets", "5", "Tag4", ((string[])(null)));
#line hidden
        }
        
        public virtual void _8_DeletePet_InvalidId(string iD, string id, string deleteResponse, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("deleteResponse", deleteResponse);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("8. Delete pet - invalid id", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 187
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table10.AddRow(new string[] {
                            "id",
                            string.Format("{0}", id)});
#line 188
 testRunner.Given("the pet with:", ((string)(null)), table10, "Given ");
#line hidden
#line 191
 testRunner.When("the pet is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 192
 testRunner.Then(string.Format("the response code should be \"{0}\"", deleteResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 193
 testRunner.When("the pet is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 194
 testRunner.Then("the response code should be \"404\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("8. Delete pet - invalid id, 1", new string[] {
                "negative"}, SourceLine=197)]
        public virtual void _8_DeletePet_InvalidId_1()
        {
#line 187
this._8_DeletePet_InvalidId("1", "-1", "400", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("8. Delete pet - invalid id, 2", new string[] {
                "negative"}, SourceLine=197)]
        public virtual void _8_DeletePet_InvalidId_2()
        {
#line 187
this._8_DeletePet_InvalidId("2", "9999999999999999999", "404", ((string[])(null)));
#line hidden
        }
        
        public virtual void _9_UpdateNameAndStatus_ValidValues(string iD, string name1, string status1, string name2, string status2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("name1", name1);
            argumentsOfScenario.Add("status1", status1);
            argumentsOfScenario.Add("name2", name2);
            argumentsOfScenario.Add("status2", status2);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("9. Update name and status - valid values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 202
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table11.AddRow(new string[] {
                            "name",
                            string.Format("{0}", name1)});
                table11.AddRow(new string[] {
                            "status",
                            string.Format("{0}", status1)});
                table11.AddRow(new string[] {
                            "photoUrls",
                            "default"});
#line 203
 testRunner.Given("the pet with:", ((string)(null)), table11, "Given ");
#line hidden
#line 208
 testRunner.When("a pet is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 209
 testRunner.Then("the response code should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
 testRunner.And("the response contains the posted values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table12.AddRow(new string[] {
                            "name",
                            string.Format("{0}", name2)});
                table12.AddRow(new string[] {
                            "status",
                            string.Format("{0}", status2)});
#line 211
 testRunner.Given("the values:", ((string)(null)), table12, "Given ");
#line hidden
#line 215
 testRunner.When("the name and/or status of the pet are updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 216
 testRunner.Then("the response code should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 217
 testRunner.And("the response contains the posted values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("9. Update name and status - valid values, 1", new string[] {
                "positive"}, SourceLine=220)]
        public virtual void _9_UpdateNameAndStatus_ValidValues_1()
        {
#line 202
this._9_UpdateNameAndStatus_ValidValues("1", "Lila1", "1", "Lila2", "pending", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("9. Update name and status - valid values, 2", new string[] {
                "positive"}, SourceLine=220)]
        public virtual void _9_UpdateNameAndStatus_ValidValues_2()
        {
#line 202
this._9_UpdateNameAndStatus_ValidValues("2", "Lila01", "1", "Lila01", "sold", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("9. Update name and status - valid values, 3", new string[] {
                "positive"}, SourceLine=220)]
        public virtual void _9_UpdateNameAndStatus_ValidValues_3()
        {
#line 202
this._9_UpdateNameAndStatus_ValidValues("3", "Lila001", "2", "Lila001", "available", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("9. Update name and status - valid values, 4", new string[] {
                "positive"}, SourceLine=220)]
        public virtual void _9_UpdateNameAndStatus_ValidValues_4()
        {
#line 202
this._9_UpdateNameAndStatus_ValidValues("4", "Lila0001", "2", "Lila0001", "sold", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("9. Update name and status - valid values, 5", new string[] {
                "positive"}, SourceLine=220)]
        public virtual void _9_UpdateNameAndStatus_ValidValues_5()
        {
#line 202
this._9_UpdateNameAndStatus_ValidValues("5", "Lila0001", "0", "Lila00001", "available", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("9. Update name and status - valid values, 6", new string[] {
                "positive"}, SourceLine=220)]
        public virtual void _9_UpdateNameAndStatus_ValidValues_6()
        {
#line 202
this._9_UpdateNameAndStatus_ValidValues("6", "Lila0001", "0", "Lila000001", "pending", ((string[])(null)));
#line hidden
        }
        
        public virtual void _10_UpdateNameAndStatus_InvalidValues(string iD, string name1, string status1, string name2, string status2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("name1", name1);
            argumentsOfScenario.Add("status1", status1);
            argumentsOfScenario.Add("name2", name2);
            argumentsOfScenario.Add("status2", status2);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("10. Update name and status - invalid values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 229
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table13.AddRow(new string[] {
                            "name",
                            string.Format("{0}", name1)});
                table13.AddRow(new string[] {
                            "status",
                            string.Format("{0}", status1)});
                table13.AddRow(new string[] {
                            "photoUrls",
                            "default"});
#line 230
 testRunner.Given("the pet with:", ((string)(null)), table13, "Given ");
#line hidden
#line 235
 testRunner.When("a pet is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 236
 testRunner.Then("the response code should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 237
 testRunner.And("the response contains the posted values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table14.AddRow(new string[] {
                            "name",
                            string.Format("{0}", name2)});
                table14.AddRow(new string[] {
                            "status",
                            string.Format("{0}", status2)});
#line 238
 testRunner.Given("the values:", ((string)(null)), table14, "Given ");
#line hidden
#line 242
 testRunner.When("the \"form\" of the pet is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 243
 testRunner.Then("the response code should be \"405\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 244
 testRunner.And("the response contains the posted values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("10. Update name and status - invalid values, 1", new string[] {
                "negative"}, SourceLine=247)]
        public virtual void _10_UpdateNameAndStatus_InvalidValues_1()
        {
#line 229
this._10_UpdateNameAndStatus_InvalidValues("1", "Lila1", "1", "", "pending", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("10. Update name and status - invalid values, 2", new string[] {
                "negative"}, SourceLine=247)]
        public virtual void _10_UpdateNameAndStatus_InvalidValues_2()
        {
#line 229
this._10_UpdateNameAndStatus_InvalidValues("2", "Lila01", "1", "Lila01", "sold123", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("10. Update name and status - invalid values, 3", new string[] {
                "negative"}, SourceLine=247)]
        public virtual void _10_UpdateNameAndStatus_InvalidValues_3()
        {
#line 229
this._10_UpdateNameAndStatus_InvalidValues("3", "Lila001", "2", "Lila", "$%^&$%^*$", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("10. Update name and status - invalid values, 4", new string[] {
                "negative"}, SourceLine=247)]
        public virtual void _10_UpdateNameAndStatus_InvalidValues_4()
        {
#line 229
this._10_UpdateNameAndStatus_InvalidValues("4", "Lila0001", "2", "Lila", "", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("11. Update name and status - pet not foud", new string[] {
                "negative"}, SourceLine=253)]
        public virtual void _11_UpdateNameAndStatus_PetNotFoud()
        {
            string[] tagsOfScenario = new string[] {
                    "negative"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11. Update name and status - pet not foud", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 254
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table15.AddRow(new string[] {
                            "id",
                            "999999"});
                table15.AddRow(new string[] {
                            "name",
                            "Lila"});
                table15.AddRow(new string[] {
                            "status",
                            "sold"});
#line 255
 testRunner.Given("the values:", ((string)(null)), table15, "Given ");
#line hidden
#line 260
 testRunner.When("the \"form\" of the pet is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 261
 testRunner.Then("the response code should be \"404\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("12. Update pet with image", new string[] {
                "positive"}, SourceLine=263)]
        public virtual void _12_UpdatePetWithImage()
        {
            string[] tagsOfScenario = new string[] {
                    "positive"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("12. Update pet with image", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 264
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table16.AddRow(new string[] {
                            "name",
                            "Lila"});
                table16.AddRow(new string[] {
                            "status",
                            "1"});
                table16.AddRow(new string[] {
                            "photoUrls",
                            "default"});
#line 265
 testRunner.Given("the pet with:", ((string)(null)), table16, "Given ");
#line hidden
#line 270
 testRunner.When("a pet is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 271
 testRunner.Then("the response code should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 272
 testRunner.And("the response contains the posted values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table17.AddRow(new string[] {
                            "additionalMetadata",
                            "metainfo"});
                table17.AddRow(new string[] {
                            "file",
                            "C:\\Users\\Ioana\\Pictures\\Screenpresso\\test.png"});
#line 273
 testRunner.Given("the values:", ((string)(null)), table17, "Given ");
#line hidden
#line 277
 testRunner.When("the \"image\" of the pet is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 278
 testRunner.Then("the response code should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 279
 testRunner.And("the response contains the posted values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void _13_UpdatePetWithImage_Validations(string iD, string id, string additionalMetadata, string file, string responseCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("additionalMetadata", additionalMetadata);
            argumentsOfScenario.Add("file", file);
            argumentsOfScenario.Add("responseCode", responseCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("13. Update pet with image - validations", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 282
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "variable",
                            "value"});
                table18.AddRow(new string[] {
                            "id",
                            string.Format("{0}", id)});
                table18.AddRow(new string[] {
                            "additionalMetadata",
                            string.Format("{0}", additionalMetadata)});
                table18.AddRow(new string[] {
                            "file",
                            string.Format("{0}", file)});
#line 283
 testRunner.Given("the values:", ((string)(null)), table18, "Given ");
#line hidden
#line 288
 testRunner.When("the \"image\" of the pet is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 289
 testRunner.Then(string.Format("the response code should be \"{0}\"", responseCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("13. Update pet with image - validations, Variant 0", new string[] {
                "negative"}, SourceLine=292)]
        public virtual void _13_UpdatePetWithImage_Validations_Variant0()
        {
#line 282
this._13_UpdatePetWithImage_Validations("1", "0", "meta", "a.jpg", "400", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("13. Update pet with image - validations, Variant 1", new string[] {
                "negative"}, SourceLine=292)]
        public virtual void _13_UpdatePetWithImage_Validations_Variant1()
        {
#line 282
this._13_UpdatePetWithImage_Validations("1", "9999999", "meta", "a.jpg", "400", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("13. Update pet with image - validations, Variant 2", new string[] {
                "negative"}, SourceLine=292)]
        public virtual void _13_UpdatePetWithImage_Validations_Variant2()
        {
#line 282
this._13_UpdatePetWithImage_Validations("2", "2", "", "a.jpg", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("13. Update pet with image - validations, Variant 3", new string[] {
                "negative"}, SourceLine=292)]
        public virtual void _13_UpdatePetWithImage_Validations_Variant3()
        {
#line 282
this._13_UpdatePetWithImage_Validations("3", "2", "meta", "", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("13. Update pet with image - validations, Variant 4", new string[] {
                "negative"}, SourceLine=292)]
        public virtual void _13_UpdatePetWithImage_Validations_Variant4()
        {
#line 282
this._13_UpdatePetWithImage_Validations("4", "2", "", "", "400", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
